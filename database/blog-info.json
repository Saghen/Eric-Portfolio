[{"title":"JavaScript: What’s new in ECMAScript 2018 (ES2018)?","image":"https://cdn-images-1.medium.com/max/800/1*2USQFRPHkmpnXI8Ty-OloA.png","author":"Eric Dyer","length":"6 mins","previewcontent":"At the latest TC39 meeting the new features that will make it into the “ECMAScript® 2018 Language Specification” (ES2018) have been selected. All proposals that have reached stage-4 since the consolidation of ES2017 got selected. This post gives one a quick look at the features that made it into ES2018.","content":"{\"ops\":[{\"insert\":\"At the latest TC39 meeting the new features that will make it into the \"},{\"attributes\":{\"bold\":true},\"insert\":\"“ECMAScript® 2018 Language Specification”\"},{\"insert\":\" (ES2018) have been selected. All proposals that have reached stage-4 since the consolidation of \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://www.bram.us/2017/07/18/es2017-es8-language-features/\"},\"insert\":\"ES2017\"},{\"insert\":\" got selected. This post gives one a quick look at the features that made it into ES2018.\\n\\n\"},{\"attributes\":{\"italic\":true,\"bold\":true},\"insert\":\"❓ Stage-4 \"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"The TC39 Committee has \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://tc39.github.io/process-document/\"},\"insert\":\"a 5 stage process in place, ranging from stage-0 to stage-4\"},{\"attributes\":{\"italic\":true},\"insert\":\", by which it develops a new language feature. Stage-4 is the “Finished” phase. A list of Stage-4 proposals is \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposals/blob/master/finished-proposals.md\"},\"insert\":\"available on GitHub\"},{\"attributes\":{\"italic\":true},\"insert\":\".\"},{\"insert\":\"\\n\\nObject Rest/Spread Properties\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"insert\":\"When destructuring an object, \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-object-rest-spread\"},\"insert\":\"Object Rest Properties\"},{\"insert\":\" allow you to collect the remaining properties of an object onto a new object. Think of it as a magic magnet attracting all leftovers.\\n\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*B9x6JBbf8RvAbtNDecUhLQ.png\"}},{\"insert\":\"\\n\\n\"},{\"attributes\":{\"color\":\"rgba(0, 0, 0, 0.84)\",\"background\":\"#ffffff\"},\"insert\":\"I use this one myself a lot, especially in a React (Native) context where I pluck certain values from \"},{\"attributes\":{\"color\":\"rgba(0, 0, 0, 0.84)\",\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"this.props\"},{\"attributes\":{\"color\":\"rgba(0, 0, 0, 0.84)\",\"background\":\"#ffffff\"},\"insert\":\" for internal use, and then forward on all other props to the returned child component by spreading them again.\"},{\"insert\":\"\\n\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*sLrYwcDW3G20NBPBiAIZFw.png\"}},{\"insert\":\"\\n\\n\"},{\"attributes\":{\"color\":\"rgba(0, 0, 0, 0.84)\",\"background\":\"#ffffff\"},\"insert\":\"Additionally, if you turn your thinking-logic around a bit, Object Rest Properties provide you with a good way to \"},{\"attributes\":{\"color\":\"inherit\",\"background\":\"#ffffff\",\"link\":\"https://www.bram.us/2018/01/10/javascript-removing-a-property-from-an-object-immutably-by-destructuring-it/\"},\"insert\":\"remove a property from an object in an immutable way\"},{\"attributes\":{\"color\":\"rgba(0, 0, 0, 0.84)\",\"background\":\"#ffffff\"},\"insert\":\".\"},{\"insert\":\"\\n\\nAsynchronous Iteration\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"insert\":\"With \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-async-iteration\"},\"insert\":\"Asynchronous Iteration\"},{\"insert\":\" we get asynchronous iterators and asynchronous iterables. Asynchronous iterators just like regular iterators, except their \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"next()\"},{\"insert\":\"method returns a promise for a \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"{ value, done }\"},{\"insert\":\" pair. To consume asynchronous iterables, we can now use the \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"await\"},{\"insert\":\" keyword with \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"for … of\"},{\"insert\":\"loops.\\n\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*C_7kNH0_rFeicKi9tObdZw.png\"}},{\"insert\":\"\\n\\nPromise.prototype.finally()\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"attributes\":{\"link\":\"https://github.com/tc39/proposal-promise-finally\",\"color\":\"inherit\",\"background\":\"#f0f0f0\",\"code\":true},\"insert\":\"Promise.prototype.finally()\"},{\"insert\":\" finalizes the whole promises implementation, allowing you to register a callback to be invoked when a promise is settled (either fulfilled, or rejected).\\nA typical use case is to hide a spinner after a \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"fetch()\"},{\"insert\":\" request: instead of duplicating the logic inside the last \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\".then()\"},{\"insert\":\" and \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\".catch()\"},{\"insert\":\", one can now place it inside \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\".finally()\"},{\"insert\":\"\\n\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*0zLMfcqCqEc5avr8d84xTQ.png\"}},{\"insert\":\"\\n\\nRegExp related features\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"insert\":\"In total 4 \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"RegExp\"},{\"insert\":\" related proposals made it into ES2018:\\n\"},{\"attributes\":{\"link\":\"https://github.com/tc39/proposal-regexp-dotall-flag\",\"color\":\"inherit\",\"background\":\"#f0f0f0\",\"code\":true},\"insert\":\"s\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-regexp-dotall-flag\"},\"insert\":\" (\"},{\"attributes\":{\"link\":\"https://github.com/tc39/proposal-regexp-dotall-flag\",\"color\":\"inherit\",\"background\":\"#f0f0f0\",\"code\":true},\"insert\":\"dotAll\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-regexp-dotall-flag\"},\"insert\":\") flag for regular expressions\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-regexp-named-groups\"},\"insert\":\"RegExp named capture groups\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-regexp-lookbehind\"},\"insert\":\"RegExp Lookbehind Assertions\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-regexp-unicode-property-escapes\"},\"insert\":\"RegExp Unicode Property Escapes\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"insert\":\"I especially digg the “RegExp named capture groups” feature, as it improves readability:\\n\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*GuYqQQ29T3eULUlUFLOR0g.png\"}},{\"insert\":\"\\n\\nMore info on these features can be found at Mathias Bynens — one of the driving forces behind these proposals — his blog: \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://mathiasbynens.be/notes/es-regexp-proposals\"},\"insert\":\"ECMAScript regular expressions are getting better!\"},{\"insert\":\"\\n\\nOther new Features\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"insert\":\"To top it off \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-template-literal-revision\"},\"insert\":\"a tweak to template literals\"},{\"insert\":\" landed: when using tagged template literals the restriction on escape sequences are removed, thus allowing things like \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"\\\\xerxes\"},{\"insert\":\". Before this tweak an error would be thrown because \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"\\\\x\"},{\"insert\":\" is the start of a hex escape with \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"erxes\"},{\"insert\":\" not being a valid hex value.\\n\\n\"},{\"attributes\":{\"italic\":true,\"bold\":true},\"insert\":\"❓ Tagged template literal\"},{\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"As per \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"},\"insert\":\"MDN\"},{\"attributes\":{\"italic\":true},\"insert\":\": If there is an expression preceding the template literal, the template string is called a “tagged template literal”. In that case, the tag expression (usually a function) gets called with the processed template literal, which you can then manipulate before outputting.\"},{\"insert\":\"\\n\\nWhat now?\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"insert\":\"Do note that not all these features are readily available in all browsers. Meaning that they’re Stage-4 means that they are finished, and that browser vendors should implement them \"},{\"attributes\":{\"italic\":true},\"insert\":\"(some already have, others are in the process)\"},{\"insert\":\".\\nAs for the future, I’m already looking forward at what’s next to come for JavaScript. Things like the \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://www.bram.us/2017/01/30/javascript-null-propagation-operator/\"},\"insert\":\"Optional Chaining Operator\"},{\"insert\":\" already get me very excited 😊\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"💻 The examples embedded in this post are part of a talk on ESNext named \"},{\"attributes\":{\"italic\":true,\"bold\":true},\"insert\":\"“What’s next for JavaScript?”\"},{\"attributes\":{\"italic\":true},\"insert\":\", which I recently gave at a \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://fronteers.nl/vereniging/commissies/belgie\"},\"insert\":\"Fronteers België\"},{\"attributes\":{\"italic\":true},\"insert\":\"meetup. I’m currently still in the process of preparing the slides for publication. I’m available for bringing this talk at your meetup/conference.\"},{\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"💡 This post \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://www.bram.us/2018/01/30/whats-new-in-ecmascript2018/\"},\"insert\":\"first appeared on my blog bram.us\"},{\"attributes\":{\"italic\":true},\"insert\":\". You can follow it via \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://www.bram.us/feed/\"},\"insert\":\"RSS\"},{\"attributes\":{\"italic\":true},\"insert\":\", \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://www.twitter.com/bramusblog/\"},\"insert\":\"Twitter\"},{\"attributes\":{\"italic\":true},\"insert\":\", and \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://www.facebook.com/bramusblog\"},\"insert\":\"Facebook\"},{\"attributes\":{\"italic\":true},\"insert\":\".\"},{\"insert\":\"\\n\"}]}","tag":"Programming","dateposted":"July 19, 2018","id":0,"comments":[{"author":"Liam Dyer","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","date":"July 19, 2018"},{"author":"Liam Dyer","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","date":"July 19, 2018"},{"author":"Liam Dyer","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","date":"July 19, 2018"}]}]