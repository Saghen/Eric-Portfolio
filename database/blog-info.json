[
    {
        "title": "Why is Python so slow?",
        "image": "https://saghen.com/uploads/python-is-slow.jpg",
        "author": "Eric Dyer",
        "length": "17 mins",
        "previewcontent": "How does Java compare in terms of speed to C or C++ or C# or Python? The answer depends greatly on the type of application you’re running. No benchmark is perfect, but The Computer Language Benchmarks Game is a good starting point.",
        "content": "{\"ops\":[{\"insert\":\"Python is booming in popularity. It is used in DevOps, Data Science, Web Development and Security. It does not, however, win any medals for speed.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"How does Java compare in terms of speed to C or C++ or C# or Python? The answer depends greatly on the type of application you’re running. No benchmark is perfect, but The Computer Language Benchmarks Game is \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"http://algs4.cs.princeton.edu/faq/\"},\"insert\":\"a good starting point\"},{\"attributes\":{\"italic\":true},\"insert\":\".\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"insert\":\"I’ve been referring to the Computer Language Benchmarks Game for over a decade; compared with other languages like Java, C#, Go, JavaScript, C++, Python is \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/python.html\"},\"insert\":\"one of the slowest\"},{\"insert\":\". This includes \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://en.wikipedia.org/wiki/Just-in-time_compilation\"},\"insert\":\"JIT\"},{\"insert\":\" (C#, Java) and \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://en.wikipedia.org/wiki/Ahead-of-time_compilation\"},\"insert\":\"AOT\"},{\"insert\":\" (C, C++) compilers, as well as interpreted languages like JavaScript.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"NB: When I say “Python”, I’m talking about the reference implementation of the language, CPython. I will refer to other runtimes in this article.\"},{\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"I want to answer this question: When Python completes a comparable application 2–10x slower than another language, why is it slow and can’t we make it faster?\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"insert\":\"Here are the top theories:\\n“\"},{\"attributes\":{\"italic\":true},\"insert\":\"It’s the GIL (Global Interpreter Lock)\"},{\"insert\":\"”\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"insert\":\"“\"},{\"attributes\":{\"italic\":true},\"insert\":\"It’s because its interpreted and not compiled\"},{\"insert\":\"”\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"insert\":\"“\"},{\"attributes\":{\"italic\":true},\"insert\":\"It’s because its a dynamically typed language\"},{\"insert\":\"”\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"insert\":\"Which one of these reasons has the biggest impact on performance?\\n\\n“It’s the GIL”\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"insert\":\"Modern computers come with CPU’s that have multiple cores, and sometimes multiple processors. In order to utilise all this extra processing power, the Operating System defines a low-level structure called a thread, where a process (e.g. Chrome Browser) can spawn multiple threads and have instructions for the system inside. That way if one process is particularly CPU-intensive, that load can be shared across the cores and this effectively makes most applications complete tasks faster.\\nMy Chrome Browser, as I’m writing this article, has \"},{\"attributes\":{\"bold\":true},\"insert\":\"44\"},{\"insert\":\" threads open. Keep in mind that the structure and API of threading are different between POSIX-based (e.g. Mac OS and Linux) and Windows OS. The operating system also handles the scheduling of threads.\\nIF you haven’t done multi-threaded programming before, a concept you’ll need to quickly become familiar with locks. Unlike a single-threaded process, you need to ensure that when changing variables in memory, multiple threads don’t try and access/change the same memory address at the same time.\\nWhen CPython creates variables, it allocates the memory and then counts how many references to that variable exist, this is a concept known as reference counting. If the number of references is 0, then it frees that piece of memory from the system. This is why creating a “temporary” variable within say, the scope of a for loop, doesn’t blow up the memory consumption of your application.\\nThe challenge then becomes when variables are shared within multiple threads, how CPython locks the reference count. There is a “global interpreter lock” that carefully controls thread execution. The interpreter can only execute one operation at a time, regardless of how many threads it has.\\n\\nWhat does this mean to the performance of Python application?\"},{\"attributes\":{\"header\":4},\"insert\":\"\\n\"},{\"insert\":\"If you have a single-threaded, single interpreter application. \"},{\"attributes\":{\"bold\":true},\"insert\":\"It will make no difference to the speed\"},{\"insert\":\". Removing the GIL would have no impact on the performance of your code.\\n\\nIf you wanted to implement concurrency within a single interpreter (Python process) by using threading, and your threads were IO intensive (e.g. Network IO or Disk IO), you would see the consequences of GIL-contention.\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/0*S_iSksY5oM5H1Qf_.png\"}},{\"insert\":\"\\nFrom David Beazley’s GIL visualised post \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"http://dabeaz.blogspot.com/2010/01/python-gil-visualized.html\"},\"insert\":\"http://dabeaz.blogspot.com/2010/01/python-gil-visualized.html\"},{\"insert\":\"\\nIf you have a web-application (e.g. Django) and you’re using WSGI, then each request to your web-app is a \"},{\"attributes\":{\"bold\":true},\"insert\":\"separate\"},{\"insert\":\" Python interpreter, so there is only 1 lock \"},{\"attributes\":{\"italic\":true},\"insert\":\"per\"},{\"insert\":\" request. Because the Python interpreter is slow to start, some WSGI implementations have a “Daemon Mode” \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://www.slideshare.net/GrahamDumpleton/secrets-of-a-wsgi-master\"},\"insert\":\"which keep Python process(es) on the go for you.\"},{\"insert\":\"\\nWhat about other Python runtimes?\"},{\"attributes\":{\"header\":4},\"insert\":\"\\n\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"http://doc.pypy.org/en/latest/faq.html#does-pypy-have-a-gil-why\"},\"insert\":\"PyPy has a GIL\"},{\"insert\":\" and it is typically >3x faster than CPython.\\n\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"http://www.jython.org/jythonbook/en/1.0/Concurrency.html#no-global-interpreter-lock\"},\"insert\":\"Jython does not have a GIL\"},{\"insert\":\" because a Python thread in Jython is represented by a Java thread and benefits from the JVM memory-management system.\\n\\nHow does JavaScript do this?\"},{\"attributes\":{\"header\":4},\"insert\":\"\\n\"},{\"insert\":\"Well, firstly all Javascript engines \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management\"},\"insert\":\"use mark-and-sweep Garbage Collection\"},{\"insert\":\". As stated, the primary need for the GIL is CPython’s memory-management algorithm.\\nJavaScript does not have a GIL, but it’s also \"},{\"attributes\":{\"bold\":true},\"insert\":\"single\"},{\"insert\":\"-threaded so it doesn’t require one. JavaScript’s event-loop and Promise/Callback pattern are how asynchronous-programming is achieved in place of concurrency. Python has a similar thing with the asyncio event-loop.\\n\\n“It’s because its an interpreted language”\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"insert\":\"I hear this a lot and I find it a gross-simplification of the way CPython actually works. If at a terminal you wrote \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"python myscript.py\"},{\"insert\":\" then CPython would start a long sequence of reading, lexing, parsing, compiling, interpreting and executing that code.\\n\\nIf you’re interested in how that process works, I’ve written about it before:\\n\"},{\"attributes\":{\"background\":\"rgba(255, 255, 255, 0)\",\"color\":\"rgba(0, 0, 0, 0.9)\",\"link\":\"https://hackernoon.com/modifying-the-python-language-in-7-minutes-b94b0a99ce14\"},\"insert\":\"Modifying the Python language in 6 minutes\"},{\"insert\":\"\\n\"},{\"attributes\":{\"background\":\"rgba(255, 255, 255, 0)\",\"color\":\"rgba(0, 0, 0, 0.68)\",\"link\":\"https://hackernoon.com/modifying-the-python-language-in-7-minutes-b94b0a99ce14\"},\"insert\":\"This week I raised my first pull-request to the CPython core project, which was declined :-( but as to not completely…\"},{\"insert\":\"\\n\\nAn important point in that process is the creation of a \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\".pyc\"},{\"insert\":\" file, at the compiler stage, the bytecode sequence is written to a file inside \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"__pycache__/\"},{\"insert\":\"on Python 3 or in the same directory in Python 2. This doesn’t just apply to your script, but all of the code you imported, including 3rd party modules.\\nSo most of the time (unless you write code which you only ever run once?), Python is interpreting bytecode and executing it locally. Compare that with Java and C#.NET:\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"Java compiles to an “Intermediate Language” and the Java Virtual Machine reads the bytecode and \"},{\"attributes\":{\"italic\":true,\"bold\":true},\"insert\":\"just-in-time\"},{\"attributes\":{\"italic\":true},\"insert\":\" compiles it to machine code. The .NET CIL is the same, the .NET Common-Language-Runtime, CLR, uses just-in-time compilation to machine code.\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"insert\":\"So, why is Python so much slower than both Java and C# in the benchmarks if they all use a virtual machine and some sort of Bytecode? Firstly, .NET and Java are JIT-Compiled.\\n\\nJIT or Just-in-time compilation requires an intermediate language to allow the code to be split into chunks (or frames). Ahead of time (AOT) compilers are designed to ensure that the CPU can understand every line in the code before any interaction takes place.\\nThe JIT itself does not make the execution any faster, because it is still executing the same bytecode sequences. However, JIT enables optimizations to be made at runtime. A good JIT optimizer will see which parts of the application are being executed a lot, call these “hot spots”. It will then make optimizations to those bits of code, by replacing them with more efficient versions.\\nThis means that when your application does the same thing again and again, it can be significantly faster. Also, keep in mind that Java and C# are strongly-typed languages so the optimiser can make many more assumptions about the code.\\n\"},{\"attributes\":{\"bold\":true},\"insert\":\"PyPy has a JIT\"},{\"insert\":\" and as mentioned in the previous section, is significantly faster than CPython. This performance benchmark article goes into more detail —\\n\"},{\"attributes\":{\"background\":\"rgba(255, 255, 255, 0)\",\"color\":\"rgba(0, 0, 0, 0.9)\",\"link\":\"https://hackernoon.com/which-is-the-fastest-version-of-python-2ae7c61a6b2b\"},\"insert\":\"Which is the fastest version of Python?\"},{\"insert\":\"\\n\\n\"},{\"attributes\":{\"background\":\"rgba(255, 255, 255, 0)\",\"color\":\"rgba(0, 0, 0, 0.68)\",\"link\":\"https://hackernoon.com/which-is-the-fastest-version-of-python-2ae7c61a6b2b\"},\"insert\":\"Of course, “it depends”, but what does it depend on and how can you assess which is the fastest version of Python for…\"},{\"insert\":\"\\n\"},{\"attributes\":{\"color\":\"inherit\",\"background\":\"rgba(255, 255, 255, 0)\",\"link\":\"https://hackernoon.com/which-is-the-fastest-version-of-python-2ae7c61a6b2b\"},\"insert\":\"hackernoon.com\"},{\"insert\":\"\\nSo why doesn’t CPython use a JIT?\"},{\"attributes\":{\"header\":4},\"insert\":\"\\n\"},{\"insert\":\"There are downsides to JITs: one of those is startup time. CPython startup time is already comparatively slow, PyPy is 2–3x slower to start than CPython. The Java Virtual Machine is notoriously slow to boot. The .NET CLR gets around this by starting at system-startup, but the developers of the CLR also develop the Operating System on which the CLR runs.\\n\\nIf you have a single Python process running for a long time, with code that can be optimized because it contains “hot spots”, then a JIT makes a lot of sense.\\nHowever, CPython is a \"},{\"attributes\":{\"bold\":true},\"insert\":\"general-purpose\"},{\"insert\":\" implementation. So if you were developing command-line applications using Python, having to wait for a JIT to start every time the CLI was called would be horribly slow.\\nCPython has to try and serve as many use cases as possible. There was the possibility of \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://www.slideshare.net/AnthonyShaw5/pyjion-a-jit-extension-system-for-cpython\"},\"insert\":\"plugging a JIT into CPython\"},{\"insert\":\" but this project has largely stalled.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"If you want the benefits of a JIT and you have a workload that suits it, use PyPy.\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"insert\":\"“It’s because its a dynamically typed language”\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"insert\":\"In a “Statically-Typed” language, you have to specify the type of a variable when it is declared. Those would include C, C++, Java, C#, Go.\\n\\nIn a dynamically-typed language, there are still the concept of types, but the type of a variable is dynamic.\\na = 1\"},{\"attributes\":{\"code-block\":true},\"insert\":\"\\n\"},{\"insert\":\"a = \\\"foo\\\"\"},{\"attributes\":{\"code-block\":true},\"insert\":\"\\n\"},{\"insert\":\"In this toy-example, Python creates a second variable with the same name and a type of \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"str\"},{\"insert\":\" and deallocates the memory created for the first instance of \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"a\"},{\"insert\":\"\\nStatically-typed languages aren’t designed as such to make your life hard, they are designed that way because of the way the CPU operates. If everything eventually needs to equate to a simple binary operation, you have to convert objects and types down to a low-level data structure.\\nPython does this for you, you just never see it, nor do you need to care.\\nNot having to declare the type isn’t what makes Python slow, the design of the Python language enables you to make almost anything dynamic. You can replace the methods on objects at runtime, you can monkey-patch low-level system calls to a value declared at runtime. Almost anything is possible.\\nIt’s this design that makes it \"},{\"attributes\":{\"bold\":true},\"insert\":\"incredibly hard\"},{\"insert\":\" to optimise Python.\\nTo illustrate my point, I’m going to use a syscall tracing tool that works in Mac OS called Dtrace. CPython distributions do not come with DTrace builtin, so you have to recompile CPython. I’m using 3.6.6 for my demo\\n\\nwget https://github.com/python/cpython/archive/v3.6.6.zip\"},{\"attributes\":{\"code-block\":true},\"insert\":\"\\n\"},{\"insert\":\"unzip v3.6.6.zip\"},{\"attributes\":{\"code-block\":true},\"insert\":\"\\n\"},{\"insert\":\"cd v3.6.6\"},{\"attributes\":{\"code-block\":true},\"insert\":\"\\n\"},{\"insert\":\"./configure --with-dtrace\"},{\"attributes\":{\"code-block\":true},\"insert\":\"\\n\"},{\"insert\":\"make\"},{\"attributes\":{\"code-block\":true},\"insert\":\"\\n\"},{\"insert\":\"Now \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"python.exe\"},{\"insert\":\" will have Dtrace tracers throughout the code. \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/paulross/dtrace-py#the-lightning-talk\"},\"insert\":\"Paul Ross wrote an awesome Lightning Talk on Dtrace\"},{\"insert\":\". You can \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/paulross/dtrace-py/tree/master/toolkit\"},\"insert\":\"download DTrace starter files\"},{\"insert\":\" for Python to measure function calls, execution time, CPU time, syscalls, all sorts of fun. e.g.\\n\"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"sudo dtrace -s toolkit/<tracer>.d -c ‘../cpython/python.exe script.py’\"},{\"insert\":\"\\nThe \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"py_callflow\"},{\"insert\":\" tracer shows all the function calls in your application\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*Lz4UdUi4EwknJ0IcpSJ52g.gif\"}},{\"insert\":\"\\nSo, does Python’s dynamic typing make it slow?\\nComparing and converting types is costly, every time a variable is read, written to or referenced the type is checked\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"insert\":\"It is hard to optimise a language that is so dynamic. The reason many alternatives to Python are so much faster is that they make compromises to flexibility in the name of performance\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"insert\":\"Looking at \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"http://cython.org/\"},\"insert\":\"Cython\"},{\"insert\":\", which combines C-Static Types and Python to optimise code where the types are known\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"http://notes-on-cython.readthedocs.io/en/latest/std_dev.html\"},\"insert\":\" can provide \"},{\"insert\":\"an \"},{\"attributes\":{\"bold\":true},\"insert\":\"84x performance\"},{\"insert\":\"improvement.\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"insert\":\"\\nConclusion\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"Python is primarily slow because of its dynamic nature and versatility. It can be used as a tool for all sorts of problems, where more optimised and faster alternatives are probably available.\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"insert\":\"There are, however, ways of optimising your Python applications by leveraging async, understanding the profiling tools, and consider using multiple-interpreters.\\nFor applications where startup time is unimportant and the code would benefit a JIT, consider PyPy.\\n\\n\"},{\"attributes\":{\"background\":\"transparent\"},\"insert\":\"For parts of your code where performance is critical and you have more statically-typed variables, consider using \"},{\"attributes\":{\"background\":\"transparent\",\"color\":\"inherit\",\"link\":\"http://cython.org/\"},\"insert\":\"Cython\"},{\"attributes\":{\"background\":\"transparent\"},\"insert\":\".\"},{\"attributes\":{\"header\":4},\"insert\":\"\\n\"}]}",
        "topic": "Programming",
        "comments": [],
        "dateposted": "July 22, 2018",
        "id": 3
    },
    {
        "title": "People Who Have “Too Many Interests” Are More Likely To Be Successful According To Research",
        "image": "https://saghen.com/uploads/polymath.jpeg",
        "author": "Eric Dyer",
        "length": "31 mins",
        "previewcontent": "If being a generalist was the path to mediocrity, why did the most comprehensive study of the most significant scientists in all of history uncover that 15 of the 20 were polymaths? Newton. Galileo. Aristotle. Kepler. Descartes. Huygens. Laplace. Faraday. Pasteur. Ptolemy. Hooke. Leibniz. Euler. Darwin. Maxwell — all polymaths.",
        "content": "{\"ops\":[{\"attributes\":{\"bold\":true},\"insert\":\"The most comprehensive case that has ever been made for why nearly everyone should become a polymath in a modern knowledge economy.\"},{\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"“Jack of all trades, master of none.”\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"insert\":\"The warning against being a generalist has persisted for \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"http://snip.ly/rrLW\"},\"insert\":\"hundreds of years in dozens of languages\"},{\"insert\":\". “Equipped with knives all over, yet none is sharp,” warn people in China. In Estonia, it goes, “Nine trades, the tenth one — hunger.”\\nYet, many of the most impactful individuals , both contemporary and historical, have been generalists: Elon Musk, Steve Jobs, Richard Feynman, Ben Franklin, Thomas Edison, Leonardo Da Vinci, and Marie Curie to name just a few.\\n\\nWhat’s going on here?\\nIf being a generalist was the path to mediocrity, why did the most \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://amzn.to/2GGPOtw\"},\"insert\":\"comprehensive study\"},{\"insert\":\" of the most significant scientists in all of history uncover that 15 of the 20 were polymaths? Newton. Galileo. Aristotle. Kepler. Descartes. Huygens. Laplace. Faraday. Pasteur. Ptolemy. Hooke. Leibniz. Euler. Darwin. Maxwell — all polymaths.\\nIf being a generalist was so ineffective, why are the founders of the five largest companies in the world — Bill Gates, Steve Jobs, Warren Buffett, Larry Page, and Jeff Bezos — all polymaths (\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://medium.com/the-mission/the-5-hour-rule-if-youre-not-spending-5-hours-per-week-learning-you-re-being-irresponsible-791c3f18f5e6\"},\"insert\":\"who also follow the 5-hour rule\"},{\"insert\":\")? Are these legends just genius anomalies? Or are they people we could and should imitate in order to be successful in a modern knowledge economy?\\nIf being a generalist is an ineffective career path, why do \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://www.researchgate.net/profile/Robert_Root-Bernstein/publication/226640428_Multiple_Giftedness_in_Adults_The_Case_of_Polymaths/links/00b7d5272912c07169000000/Multiple-Giftedness-in-Adults-The-Case-of-Polymaths.pdf\"},\"insert\":\"10+ academic studies\"},{\"insert\":\" find a correlation between the number of interests/competencies someone develops and their creative impact?\\n\\nThe Era of the Modern Polymath\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"“The future belongs to the integrators.” — Educator Ernest Boyer\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"attributes\":{\"background\":\"transparent\",\"bold\":true},\"insert\":\"I define a modern polymath is someone who becomes competent in at least three diverse domains and integrates them into a top 1-percent skill set.\"},{\"insert\":\"\\nIn another words, they bring the best of what humanity has discovered from across fields to help them be more effective in their core field. Hence the T-shape below. Specialists, on the other hand, just focus on knowledge from their own field.\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/600/0*ZkBqv5AXfSXNH8Au.\"}},{\"insert\":\"\\nSince Malcolm Gladwell’s book, \"},{\"attributes\":{\"italic\":true},\"insert\":\"Outliers\"},{\"insert\":\", popularized the concept, many now believe that to become world-class in a skill, they must complete 10,000 hours of deliberate practice in order to beat the competition, going as deep as possible into one field. Modern polymaths go against the grain of this popular advice, building atypical combinations of skills and knowledge \"},{\"attributes\":{\"italic\":true},\"insert\":\"across\"},{\"insert\":\" fields and then integrating them to create breakthrough ideas and even brand new fields and industries where there is \"},{\"attributes\":{\"italic\":true},\"insert\":\"little competition\"},{\"insert\":\".\\nFor example, people have studied biology and sociology for hundreds of years. But no one had ever studied them together and synthesized them into a new discipline until researcher EO Wilson pioneered the field of sociobiology in the 1970s. We also have modern tech heroes like Steve Jobs (\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://medium.com/the-mission/the-number-one-predictor-of-career-success-according-to-network-science\"},\"insert\":\"who I write about here\"},{\"insert\":\") who famously combined design with hardware and software.\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/600/1*5vrZstJtHDkfz2TxfnAI_A.png\"}},{\"insert\":\"\\nElon Musk (\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://medium.com/@michaeldsimmons/how-elon-musk-learns-faster-and-better-than-everyone-else-a010a4f586ef\"},\"insert\":\"who I write about here\"},{\"insert\":\") has combined an understanding of physics, engineering, programming, design, manufacturing, and business to create several multibillion-dollar companies in completely different fields. He not only makes atypical combinations of skills, he also makes atypical combinations of personality traits.\\nCharles Darwin, creator of one of the most important theories in history — the theory of evolution — was a polymath too. Steven Johnson, author of \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"http://amzn.to/2G6JxVy\"},\"insert\":\"Where Good Ideas Come From\"},{\"insert\":\" (one of my top five favorite books of all-time), brilliantly describes Darwin’s first scientific breakthrough:\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"The idea itself drew on a coffeehouse of different disciplines: to solve the mystery, he had to think like a naturalist, a marine biologist, and a geologist all at once. He had to understand the life cycle of coral colonies, and observe the tiny evidence of organic sculpture on the rocks of the Keeling Islands; he had to think on the immense time scales of volcanic mountains rising and falling into the sea… To understand the idea in its full complexity required a kind of probing intelligence, willing to think across those different disciplines and scales.\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"insert\":\"A more everyday example is my longtime friend Elizabeth Saunders. Elizabeth combined her passions for writing, Christianity, and time management into a thriving coaching business based on principles of Christianity that she promotes \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://www.amazon.com/Divine-Time-Management-Trusting-Loving/dp/1478974362\"},\"insert\":\"through books and articles\"},{\"insert\":\". There is a whole cottage industry around time management, but there are almost no resources on divine time management.\\nIn order to become an effective online writer, I’ve deliberately combined academic research, digital journalism, and growth hacking into one skillset. I didn’t go to college for any of these skills, but practiced them over time and received coaching on them. My observation is that academics often look down on journalists; journalists look down on marketers; and marketers look down on journalists and academics. What many fail to see is that each brings something valuable to the table and that all of these skills combined lead to great ideas seen by large audiences.\\n\\nWhy Being A Modern Polymath Is The New Normal\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"“Study the science of art. Study the art of science. Develop your senses — especially learn how to see. Realize that everything connects to everything else.”\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"— Leonardo Da Vinci\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"insert\":\"Polymaths have existed forever — indeed they are often the ones who’ve advanced Western civilization more than any others — but they’ve been called different things throughout history. This timeline shows the evolution over time.\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/0*1ICacI1xzTAWU8lW.\"}},{\"insert\":\"\\nBut is this a recipe that most people should follow?\\nThere are several significant changes trending in our knowledge economy right now, which are flipping the conventional wisdom on the value of specialization on its head. In today’s world, diverse interests are not a curse, they’re a blessing. Being a polymath instead of a specialist is an advantage, not a weakness.\\nPeople who love learning across fields can use that tendency to be more financially successful and impactful in their career.\\nWhat follows is the most comprehensive case for becoming a polymath that has ever been created to my knowledge. Then, at the end of the article, I share a resource with you that will help you become a successful polymath.\\nPolymath Advantage 1: Creating an atypical combination of two or more skills that you’re merely competent can lead to a world-class skill set.\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"insert\":\"Scott Adams, the creator of Dilbert, one of the most popular comic strips of all time, wasn’t the funniest person in the world. He wasn’t the best cartoonist in the world, and he wasn’t the most experienced employee (he was only in his 20s when he started Dilbert). But by combining his humor and illustration skills while focusing on business culture, he became the best in the world in his niche. In an insightful blog post, \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"http://dilbertblog.typepad.com/the_dilbert_blog/2007/07/career-advice.html\"},\"insert\":\"he nails how he did it\"},{\"insert\":\" and how you can too:\\n\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"If you want something extraordinary [in life], you have two paths:\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"1. Become the best at one specific thing.\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"2. Become very good (top 25%) at two or more things.\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"The first strategy is difficult to the point of near impossibility. Few people will ever play in the NBA or make a platinum album. I don’t recommend anyone even try.\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"The second strategy is fairly easy. Everyone has at least a few areas in which they could be in the top 25% with some effort. In my case, I can draw better than most people, but I’m hardly an artist. And I’m not any funnier than the average standup comedian who never makes it big, but I’m funnier than most people. The magic is that few people can draw well and write jokes. It’s the combination of the two that makes what I do so rare. And when you add in my business background, suddenly I had a topic that few cartoonists could hope to understand without living it.\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"insert\":\"\\nPolymath Advantage 2: Most creative breakthroughs come via making atypical combinations of skills.\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"insert\":\"We can see the power of atypical combinations when we look back at the most influential papers throughout the history of science. Researcher Brian Uzzi, a professor at the Northwestern University Kellogg School of Management, analyzed more than 26 million scientific papers going back hundreds of years and found that the most impactful papers \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"http://www.kellogg.northwestern.edu/faculty/uzzi/htm/papers/Science-2013-Uzzi-468-72.pdf\"},\"insert\":\"often have teams with atypical combinations of backgrounds\"},{\"insert\":\". In \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://insight.kellogg.northwestern.edu/article/a_virtuous_mix_allows_innovation_to_thrive\"},\"insert\":\"another comprehensive study\"},{\"insert\":\" performed by Uzzi, he compared the results of academic papers by the number of citations they received and the other papers they cited. A fascinating pattern emerged. The top performing studies cited atypical combinations of other studies (90 percent conventional citations from their own field and 10 percent from other fields).\\n\\nPolymath Advantage 3: It’s easier and faster than ever to become competent in a new skill.\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"insert\":\"Want to learn a new, valuable skill to add to your toolbox? It’s never been easier:\\n\"},{\"attributes\":{\"bold\":true},\"insert\":\"The quality of knowledge in every domain is improving. \"},{\"insert\":\"Researchers and practitioners are systematically improving and testing every field of knowledge to make it more robust. Cumulatively, old fallacious ideas are being discredited and new ideas are being added. The technology field is smarter than it was 20 years ago, for example. So are the fields of physics and biology.\"},{\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},{\"attributes\":{\"bold\":true},\"insert\":\"Second, there is an abundance of free or affordable content from the world’s top experts in every medium you can think of.\"},{\"insert\":\" Need a community and expert coaching? There are now hundreds of thousands of online courses and billions of online videos. This is the golden era for people who value learning, are willing to invest in themselves, and who are disciplined enough to take action on their own.\"},{\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},{\"insert\":\"\\nMy favorite example of high-quality, easy-to-access knowledge is a 12-year-old girl named \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://www.youtube.com/watch?v=OgzdDp5qfdI\"},\"insert\":\"Adilyn Malcolm\"},{\"insert\":\", who learned how to dubstep dance in a matter of months by constantly watching short clips of others online, practicing, and repeating until she mastered each segment and could perform an entire dance flawlessly.\\n\\n\"},{\"insert\":{\"video\":\"https://www.youtube.com/embed/OgzdDp5qfdI\"}},{\"insert\":\"\\nImagine Adilyn trying to learn how dubstep before Youtube. There probably wouldn’t have been a local dance studio that specialized in dubstep. If one did, the teacher likely would not have been world-class. Next, Adilyn wouldn’t have been able to obsessively spend hours learning about it. If any dubstep videos did exist, she would’ve had to convince her parents to spend $20 a piece on them. YouTube, on the other hand, provided Adilyn with a chance to learn from many world-class teachers and performers at no cost and on her own schedule. Today, a search on Youtube for “learn dubstep” \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://www.youtube.com/results?search_query=learn+dubstep\"},\"insert\":\"returns over 1 million results\"},{\"insert\":\"!\\nAnd if that’s not impressive enough, consider 13-year-old \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://www.youtube.com/watch?v=mmQG_BCiVHU\"},\"insert\":\"Michael Sayman\"},{\"insert\":\". He taught himself how to code via Google. One of his mobile games became one of the top 100 apps in the world, beating out Starbucks and Yelp. Or watch 11-year-old \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://www.youtube.com/watch?v=UJ3u5w9NYjQ\"},\"insert\":\"Amira Willighagen\"},{\"insert\":\" masterfully sing opera after teaching herself with YouTube videos for four years. Something big is happening here, and these young prodigies are the harbingers of it.\\nAs Isaac Newton famously proclaimed, “If I have seen further it is by standing on the shoulders of giants.” In today’s era, we have more shoulders to stand on than ever.\\n\\nPolymath Advantage 4: It’s easier than ever to pioneer a new field, industry, or skill set.\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"insert\":\"While the explosion of knowledge is making it impossible or at least more difficult for anyone to know everything, it has also made it easier to find one big, atypical combination of fields or skills. It’s easier than ever to be a polymath. Here’s why:\\nFirst, one of the main ways that new skill sets, industries, and fields emerge is by combining them with old ones:\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*xbeu5OFSq1Ehsozr6EeIng.png\"}},{\"insert\":\"\\nSecond, the \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"http://blogs.nature.com/news/2014/05/global-scientific-output-doubles-every-nine-years.html\"},\"insert\":\"number of new academic fields\"},{\"insert\":\" and business industries is increasing exponentially.\\nAnd finally, as the number of new skills increases, the number of possible combinations increases exponentially. Every new chunk of knowledge can theoretically be combined with every other knowledge chunk. Every new breakthrough creates the potential for exponentially more breakthroughs.\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/0*SwYJtk6lCpZ43WsE.\"}},{\"insert\":\"\\nIf you have one building block (A), you can only make one combination (A). If you have two (A & B), then you can make three combinations (A, B, A+B). Once you get to four building blocks, you get to 15 possible combinations, and the numbers grow dramatically from there. Now consider that there are thousands and thousands of disciplines, industries, and skills. Each new one creates the potential for tens of thousands more.\\nBelow are a few of the many thousands of fields that were created very recently through combination:\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*lgh7uSPmVeVa8AlUgox6Xg.png\"}},{\"insert\":\"\\n\"},{\"attributes\":{\"bold\":true},\"insert\":\"Bottom line: \"},{\"insert\":\"when I was in high school, I remember \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"http://amzn.to/2FOp4Uq\"},\"insert\":\"reading\"},{\"insert\":\" how a young Leonardo Da Vinci was frustrated that he was born in a period where everything worth being discovered had already been discovered. This quote stuck with me, because it was written by one of the greatest inventors in human history. It’s helpful for us to remember Da Vinci’s quote, because it’s just as true today. Almost ALL of the potential discovery that humanity will do is in the future.\\n\\nPolymath Advantage 5: It future-proofs Your career.\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"“It is not the strongest or the most intelligent who will survive but those who can best manage change.” -Charles Darwin\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"insert\":\"What do the following six professions have in common?\\nApp developer\"},{\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},{\"insert\":\"Social media manager\"},{\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},{\"insert\":\"Driverless car engineer\"},{\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},{\"insert\":\"Cloud computing specialist\"},{\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},{\"insert\":\"Big data scientist\"},{\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},{\"insert\":\"YouTube content creator\"},{\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},{\"insert\":\"Answer: None of them existed 15 years ago. Imagine the power you’d have if you could go back in time, master these skills, and then be one of the best in the world at them when they hit big? We actually don’t have to guess. You’d stand a good chance of being a millionaire. The headline below shows just how valuable a driverless car engineer is.\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/0*SxtWh_5wtrHItFvW.\"}},{\"insert\":\"\\nSo what skills are going to be valuable in 20 years? Do you know?\\nNo? Neither do I. Neither does anybody.\\nSo the question arises, how do we make investments in knowledge now that will pay off far into the future?\\nI’d make the case that a polymath is much better positioned than a specialist. A polymath can take the skills that she or he has learned and combine them in new ways quickly to master new fields. On the other hand, a specialist whose fields becomes obsolete would likely take much more time to adapt to the change and have to start back at the beginning.\\nIn an environment of accelerating change, we’re going to have to become polymaths to survive. We’re going to have a dozen careers. Each one is going to require new skills.\\n\\nPolymath Advantage 6: It sets you up to solve more complex problems.\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"insert\":\"Many of the largest problems that face society and individuals benefit from solutions that integrate multiple disciplines.\\nLet’s take obesity as an example. As the chart below shows, diet and obesity account for four out of the top fifteen causes of death in the United States. Millions of deaths that are completely preventable.\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/0*azW0XeVLvI0hnl8c.\"}},{\"insert\":\"\\nFrom the outside, you could easily say that solving the obesity crisis is an easy problem. Just eat less and exercise more. Right? Not quite.\\nThe chart below from the \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://www.amazon.com/Diversity-Bonus-Knowledge-Compelling-Interests/dp/0691176884/ref=tmm_hrd_swatch_0?_encoding=UTF8&qid=1515502694&sr=8-1\"},\"insert\":\"Diversity Bonus\"},{\"insert\":\" book by researcher Scott Page shows a portion of just how complex the obesity epidemic is. As you can see, many different fields are needed to solve this problem: exercise physiology, genetics, behavioral psychology, sociology, economics, marketing, general psychology, education system, nutrition.\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/0*BsJg1QQn4eXc5Wj4.\"}},{\"insert\":\"\\n\\nPolymath Advantage 7: It helps you stand out and compete in the global economy.\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/0*VLhNxbX8C8VG9PHa.\"}},{\"insert\":\"\\nOne of the most fundamental mental models from economics is supply and demand (\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"http://www.mentalmodelclub.com/\"},\"insert\":\"see more valuable mental models\"},{\"insert\":\"). It’s relevant to the job market, to goods and services, to the world of ideas, and to many other places.\\nIn this model, there are two ways to increase how much of a price premium you command:\\nDecrease the supply (move the blue curve to the left).\"},{\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},{\"insert\":\"Increase the demand (move the red curve to the right).\"},{\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},{\"insert\":\"You can have the most valuable skill set in the world, but if everyone also has that skill set, then you’re a commodity. \"},{\"attributes\":{\"bold\":true},\"insert\":\"By becoming a polymath and developing a unique skill set that few others have, then you’ll be able to differentiate yourself and charge more.\"},{\"insert\":\"\\nWant a quick test to see if you have rare and valuable knowledge? Then ask yourself the same question that self-made billionaire Peter Thiel, one of the top investors in Silicon Valley, asks candidates he might hire and founders he might fund, “What’s the one thing you believe is true that no one else agrees with you on?” This simple question very quickly tells you whether or not you have rare and valuable ideas. If you can’t come up with anything, it tells you that you might not be as an original thinker as thought you were.\\nThis mental model is widely shared among the world’s top investors and performers as the following quotes demonstrate:\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"“You want to be greedy when others are fearful. You want to be fearful when others are greedy. It’s that simple.” — Warren Buffett, founder of Berkshire Hathaway\"},{\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"“In order to get into the top of the performance distribution, you have to escape from the crowd.” — Howard Marks, founder of Oaktree Capital ($2+ billion net worth)\"},{\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"“You can’t make money agreeing with the consensus view.” — Ray Dalio, founder of Bridgewater Associates (largest hedge fund in the world)\"},{\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"“The best projects are likely to be overlooked, not trumpeted by a crowd; the best problems to work on are often the ones nobody else even tries to solve.” — Peter Thiel, founder of PayPal and billionaire investor ($3.3 billion net worth)\"},{\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"“You have to be odd to be number 1.” -Dr. Seuss\"},{\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"The weakness of an art is its dogma. And when I’m competing against an individual from a different discipline, I try to find the dogma of that discipline. When I’m competing with someone within a discipline, I try to find their personal dogma. — Josh Waitzkin, Chess Grandmaster & World Tai Chi Champion\"},{\"insert\":\"\\n\\nBottom Line: Make Yourself Anti-Fragile\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"insert\":\"Being a polymath will be the new normal, and polymaths who synthesize diverse skills to create breakthrough innovations and solve complex problems will have a huge impact. Generalists who fail to synthesize their knowledge into value for others stand to flounder in their career, perhaps having an impressive encyclopedic knowledge, but no real impact.\\n\\nMeanwhile, specialists risk getting trapped by their success. They build up a narrow skill set and reputation and become highly paid for it. But their careers are fragile. As their professions disappear or evolve, it becomes almost impossible to switch without having to start over.\\nPolymaths, on the other hand, are what Nassim Taleb calls “anti-fragile.” Changes to the environment make them stronger. As new paradigms of business emerge or their passions grow, they can quickly combine their existing skill sets in a myriad of ways.\\nNow that you see how important it is to become a modern polymath, the next logical question is: how?\\nI created a resource to help you with just that…\\n\\nHow To Become a Modern Polymath\"},{\"attributes\":{\"header\":3},\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"“The greatest scientists are artists as well.” — Einstein\"},{\"attributes\":{\"blockquote\":true},\"insert\":\"\\n\"},{\"insert\":\"The idea of becoming a modern polymath can be overwhelming. Where do you start? What field do you learn first? How do you find the time? How do you translate what you learn into real world value?”\\nWhen I first started learning across fields, I stumbled. I remember, for example, picking up textbook on biology, which I hadn’t studied since high school, and trying to apply it to my life. It was slow and not that useful. In other words, I picked the wrong discipline (for me) to start with, and I used the wrong method to learn it. After a lot of trial and error, I learned techniques that make going across fields faster and easier\\nDuring the hundreds of hours I’ve spent researching how to be a polymath and interviewing polymaths, one key that I’ve discovered is mental models.\\nFirst, mental models transcend disciplines. They are the invisible links that connect disciplines together:\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*C0F66T0B3dbodXSvdQuhVg.png\"}},{\"insert\":\"\\nFor example, once you learn the “80/20 Rule,” which states that, in many domains, 20 percent of your efforts produce 80 percent of your results, you can use this mental model to improve efficiency and impact in every area of your life as well as every field you study forever. You can identify the 20% of relationships that cause 80% of your feeling of connection. You can identify the 20% of clients that create 80% of your business. You can identify the 20% of tasks that create 80% of your productivity. And so on!\\nFurthermore, mental models help you learn multiple skills much more quickly, because they gave your a stable base of useful and universal knowledge that you can use for the rest of your life. Therefore, when you go into any new discipline, even though you may not have direct experience with that field, you’ll quickly notice mental models you can use.\\nIn short, \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://medium.com/the-mission/this-is-exactly-how-you-should-train-yourself-to-be-smarter-infographic-86d0d42ad41c\"},\"insert\":\"mental models are key to becoming a better polymath\"},{\"insert\":\".\\n\"}]}",
        "topic": "Psychology and Learning",
        "comments": [],
        "dateposted": "July 21, 2018",
        "id": 2
    },
    {
        "title": "How it feels to learn JavaScript in 2016",
        "image": "https://saghen.com/uploads/javascript-in-2016.png",
        "author": "Eric Dyer",
        "length": "25 mins",
        "previewcontent": "The following is inspired by the article “It’s the future” from Circle CI. You can read the original here. This piece is just an opinion, and like any JavaScript framework, it shouldn’t be taken too seriously.",
        "content": "{\"ops\":[{\"attributes\":{\"italic\":true},\"insert\":\"No JavaScript frameworks were created during the writing of this article.\"},{\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"The following is inspired by the article “It’s the future” from Circle CI. You can read the original \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://circleci.com/blog/its-the-future/\"},\"insert\":\"here\"},{\"attributes\":{\"italic\":true},\"insert\":\". This piece is just an opinion, and like any JavaScript framework, it shouldn’t be taken too seriously.\"},{\"insert\":\"\\nHey, I got this new web project, but to be honest I haven’t coded much web in a few years and I’ve heard the landscape changed a bit. You are the most up-to date web dev around here right?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-The actual term is Front End engineer, but yeah, I’m the right guy. I do web in 2016. Visualisations, music players, flying drones that play football, you name it. I just came back from JsConf and ReactConf, so I know the latest technologies to create web apps.\"},{\"insert\":\"\\nCool. I need to create a page that displays the latest activity from the users, so I just need to get the data from the REST endpoint and display it in some sort of filterable table, and update it if anything changes in the server. I was thinking maybe using jQuery to fetch and display the data?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Oh my god no, no one uses jQuery anymore. You should try learning React, it’s 2016.\"},{\"insert\":\"\\nOh, OK. What’s React?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-It’s a super cool library made by some guys at Facebook, it really brings control and performance to your application, by allowing you to handle any view changes very easily.\"},{\"insert\":\"\\nThat sounds neat. Can I use React to display data from the server?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Yeah, but first you need to add React and React DOM as a library in your webpage.\"},{\"insert\":\"\\nWait, why two libraries?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-So one is the actual library and the second one is for manipulating the DOM, which now you can describe in JSX.\"},{\"insert\":\"\\nJSX? What is JSX?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-JSX is just a JavaScript syntax extension that looks pretty much like XML. It’s kind of another way to describe the DOM, think of it as a better HTML.\"},{\"insert\":\"\\nWhat’s wrong with HTML?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-It’s 2016. No one codes HTML directly anymore.\"},{\"insert\":\"\\nRight. Anyway, if I add these two libraries then I can use React?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Not quite. You need to add Babel, and then you are able to use React.\"},{\"insert\":\"\\nAnother library? What’s Babel?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Oh, Babel is a transpiler that allows you to target specific versions of JavaScript, while you code in any version of JavaScript. You don’t HAVE to include Babel to use ReactJS, but unless you do, you are stuck with using ES5, and let’s be real, it’s 2016, you should be coding in ES2016+ like the rest of the cool kids do.\"},{\"insert\":\"\\nES5? ES2016+? I’m getting lost over here. What’s ES5 and ES2016+?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-ES5 stands for ECMAScript 5. It’s the edition that has most people target since it has been implemented by most browsers nowadays.\"},{\"insert\":\"\\nECMAScript?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Yes, you know, the scripting standard JavaScript was based on in 1999 after its initial release in 1995, back then when JavaScript was named Livescript and only ran in the Netscape Navigator. That was very messy back then, but thankfully now things are very clear and we have, like, 7 editions of this implementation.\"},{\"insert\":\"\\n7 editions. For real. And ES5 and ES2016+ are?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-The fifth and seventh edition respectively.\"},{\"insert\":\"\\nWait, what happened with the sixth?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-You mean ES6? Yeah, I mean, each edition is a superset of the previous one, so if you are using ES2016+, you are using all the features of the previous versions.\"},{\"insert\":\"\\nRight. And why use ES2016+ over ES6 then?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Well, you COULD use ES6, but to use cool features like async and await, you need to use ES2016+. Otherwise you are stuck with ES6 generators with coroutines to block asynchronous calls for proper control flow.\"},{\"insert\":\"\\nI have no idea what you just said, and all these names are confusing. Look, I’m just loading a bunch of data from a server, I used to be able to just include jQuery from a CDN and just get the data with AJAX calls, why can’t I just do that?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-It’s 2016 man, no one uses jQuery anymore, it ends up in a bunch of spaghetti code. Everyone knows that.\"},{\"insert\":\"\\nRight. So my alternative is to load three libraries to fetch data and display a HTML table.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Well, you include those three libraries but bundle them up with a module manager to load only one file.\"},{\"insert\":\"\\nI see. And what’s a module manager?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-The definition depends on the environment, but in the web we usually mean anything that supports AMD or CommonJS modules.\"},{\"insert\":\"\\nRiiight. And AMD and CommonJS are…?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Definitions. There are ways to describe how multiple JavaScript libraries and classes should interact. You know, exports and requires? You can write multiple JavaScript files defining the AMD or CommonJS API and you can use something like Browserify to bundle them up.\"},{\"insert\":\"\\nOK, that makes sense… I think. What is Browserify?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-It’s a tool that allows you to bundle CommonJS described dependencies to files that can be run in the browser. It was created because most people publish those dependencies in the npm registry.\"},{\"insert\":\"\\nnpm registry?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-It’s a very big public repository where smart people put code and dependencies as modules.\"},{\"insert\":\"\\nLike a CDN?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Not really. It’s more like a centralised database where anyone can publish and download libraries, so you can use them locally for development and then upload them to a CDN if you want to.\"},{\"insert\":\"\\nOh, like Bower!\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Yes, but it’s 2016 now, no one uses Bower anymore.\"},{\"insert\":\"\\nOh, I see… so I need to download the libraries from npm then?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Yes. So for instance, if you want to use React , you download the React module and import it in your code. You can do that for almost every popular JavaScript library.\"},{\"insert\":\"\\nOh, like Angular!\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Angular is so 2015. But yes. Angular would be there, alongside VueJS or RxJS and other cool 2016 libraries. Want to learn about those?\"},{\"insert\":\"\\nLet’s stick with React, I’m already learning too many things now. So, if I need to use React I fetch it from this npm and then use this Browserify thing?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Yes.\"},{\"insert\":\"\\nThat seems overly complicated to just grab a bunch of dependencies and tie them together.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-It is, that’s why you use a task manager like Grunt or Gulp or Broccoli to automate running Browserify. Heck, you can even use Mimosa.\"},{\"insert\":\"\\nGrunt? Gulp? Broccoli? Mimosa? The heck are we talking about now?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Task managers. But they are not cool anymore. We used them in like, 2015, then we used Makefiles, but now we wrap everything with Webpack.\"},{\"insert\":\"\\nMakefiles? I thought that was mostly used on C or C++ projects.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Yeah, but apparently in the web we love making things complicated and then going back to the basics. We do that every year or so, just wait for it, we are going to do assembly in the web in a year or two.\"},{\"insert\":\"\\nSigh. You mentioned something called Webpack?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-It’s another module manager for the browser while being kind of a task runner as well. It’s like a better version of Browserify.\"},{\"insert\":\"\\nOh, Ok. Why is it better?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Well, maybe not better, it’s just more opinionated on how your dependencies should be tied. Webpack allows you to use different module managers, and not only CommonJS ones, so for instance native ES6 supported modules.\"},{\"insert\":\"\\nI’m extremely confused by this whole CommonJS/ES6 thing.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Everyone is, but you shouldn’t care anymore with SystemJS.\"},{\"insert\":\"\\nJesus christ, another noun-js. Ok, and what is this SystemJS?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Well, unlike Browserify and Webpack 1.x, SystemJS is a dynamic module loader that allows you to tie multiple modules in multiple files instead of bundling them in one big file.\"},{\"insert\":\"\\nWait, but I thought we wanted to build our libraries in one big file and load that!\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Yes, but because HTTP/2 is coming now multiple HTTP requests are actually better.\"},{\"insert\":\"\\nWait, so can’t we just add the three original libraries for React??\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Not really. I mean, you could add them as external scripts from a CDN, but you would still need to include Babel then.\"},{\"insert\":\"\\nSigh. And that is bad right?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Yes, you would be including the entire babel-core, and it wouldn’t be efficient for production. On production you need to perform a series of pre-tasks to get your project ready that make the ritual to summon Satan look like a boiled eggs recipe. You need to minify assets, uglify them, inline css above the fold, defer scripts, as well as-\"},{\"insert\":\"\\nI got it, I got it. So if you wouldn’t include the libraries directly in a CDN, how would you do it?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-I would transpile it from Typescript using a Webpack + SystemJS + Babel combo.\"},{\"insert\":\"\\nTypescript? I thought we were coding in JavaScript!\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Typescript IS JavaScript, or better put, a superset of JavaScript, more specifically JavaScript on version ES6. You know, that sixth version we talked about before?\"},{\"insert\":\"\\nI thought ES2016+ was already a superset of ES6! WHY we need now this thing called Typescript?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Oh, because it allows us to use JavaScript as a typed language, and reduce run-time errors. It’s 2016, you should be adding some types to your JavaScript code.\"},{\"insert\":\"\\nAnd Typescript obviously does that.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Flow as well, although it only checks for typing while Typescript is a superset of JavaScript which needs to be compiled.\"},{\"insert\":\"\\nSigh… and Flow is?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-It’s a static type checker made by some guys at Facebook. They coded it in OCaml, because functional programming is awesome.\"},{\"insert\":\"\\nOCaml? Functional programming?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-It’s what the cool kids use nowadays man, you know, 2016? Functional programming? High order functions? Currying? Pure functions?\"},{\"insert\":\"\\nI have no idea what you just said.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-No one does at the beginning. Look, you just need to know that functional programming is better than OOP and that’s what we should be using in 2016.\"},{\"insert\":\"\\nWait, I learned OOP in college, I thought that was good?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-So was Java before being bought by Oracle. I mean, OOP was good back in the days, and it still has its uses today, but now everyone is realising modifying states is equivalent to kicking babies, so now everyone is moving to immutable objects and functional programming. Haskell guys had been calling it for years, -and don’t get me started with the Elm guys- but luckily in the web now we have libraries like Ramda that allow us to use functional programming in plain JavaScript.\"},{\"insert\":\"\\nAre you just dropping names for the sake of it? What the hell is Ramnda?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-No. Ramda. Like Lambda. You know, that David Chambers’ library?\"},{\"insert\":\"\\nDavid who?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-David Chambers. Cool guy. Plays a mean Coup game. One of the contributors for Ramda. You should also check Erik Meijer if you are serious about learning functional programming.\"},{\"insert\":\"\\nAnd Erik Meijer is…?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Functional programming guy as well. Awesome guy. He has a bunch of presentations where he trashes Agile while using this weird coloured shirt. You should also check some of the stuff from Tj, Jash Kenas, Sindre Sorhus, Paul Irish, Addy Osmani-\"},{\"insert\":\"\\nOk. I’m going to stop you there. All that is good and fine, but I think all that is just so complicated and unnecessary for just fetching data and displaying it. I’m pretty sure I don’t need to know these people or learn all those things to create a table with dynamic data. Let’s get back to React. How can I fetch the data from the server with React?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Well, you actually don’t fetch the data with React, you just display the data with React.\"},{\"insert\":\"\\nOh, damn me. So what do you use to fetch the data?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-You use Fetch to fetch the data from the server.\"},{\"insert\":\"\\nI’m sorry? You use Fetch to fetch the data? Whoever is naming those things needs a thesaurus.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-I know right? Fetch it’s the name of the native implementation for performing XMLHttpRequests against a server.\"},{\"insert\":\"\\nOh, so AJAX.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-AJAX is just the use of XMLHttpRequests. But sure. Fetch allows you to do AJAX based in promises, which then you can resolve to avoid the callback hell.\"},{\"insert\":\"\\nCallback hell?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Yeah. Every time you perform an asynchronous request against the server, you need to wait for its response, which then makes you to add a function within a function, which is called the callback pyramid from hell.\"},{\"insert\":\"\\nOh, Ok. And this promise thing solves it?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Indeed. By manipulating your callbacks through promises, you can write easier to understand code, mock and test them, as well as perform simultaneous requests at once and wait until all of them are loaded.\"},{\"insert\":\"\\nAnd that can be done with Fetch?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Yes, but only if your user uses an evergreen browser, otherwise you need to include a Fetch polyfill or use Request, Bluebird or Axios.\"},{\"insert\":\"\\nHow many libraries do I need to know for god’s sake? How many are of them?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-It’s JavaScript. There has to be thousands of libraries that all do the same thing. We know libraries, in fact, we have the best libraries. Our libraries are huuuge, and sometimes we include pictures of Guy Fieri in them.\"},{\"insert\":\"\\nDid you just say Guy Fieri? Let’s get this over with. What these Bluebird, Request, Axios libraries do?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-They are libraries to perform XMLHttpRequests that return promises.\"},{\"insert\":\"\\nDidn’t jQuery’s AJAX method start to return promises as well?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-We don’t use the “J” word in 2016 anymore. Just use Fetch, and polyfill it when it’s not in a browser or use Bluebird, Request or Axios instead. Then manage the promise with await within an async function and boom, you have proper control flow.\"},{\"insert\":\"\\nIt’s the third time you mention await but I have no idea what it is.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Await allows you to block an asynchronous call, allowing you to have better control on when the data is being fetch and overall increasing code readability. It’s awesome, you just need to make sure you add the stage-3 preset in Babel, or use syntax-async-functions and transform-async-to-generator plugin.\"},{\"insert\":\"\\nThis is insane.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-No, insane is the fact you need to precompile Typescript code and then transpile it with Babel to use await.\"},{\"insert\":\"\\nWat? It’s not included in Typescript?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-It does in the next version, but as of version 1.7 it only targets ES6, so if you want to use await in the browser, first you need to compile your Typescript code targeting ES6 and then Babel that shit up to target ES5.\"},{\"insert\":\"\\nAt this point I don’t know what to say.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Look, it’s easy. Code everything in Typescript. All modules that use Fetch compile them to target ES6, transpile them with Babel on a stage-3 preset, and load them with SystemJS. If you don’t have Fetch, polyfill it, or use Bluebird, Request or Axios, and handle all your promises with await.\"},{\"insert\":\"\\nWe have very different definitions of easy. So, with that ritual I finally fetched the data and now I can display it with React right?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Is your application going to handle any state changes?\"},{\"insert\":\"\\nErr, I don’t think so. I just need to display the data.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Oh, thank god. Otherwise I would had to explain you Flux, and implementations like Flummox, Alt, Fluxible. Although to be honest you should be using Redux.\"},{\"insert\":\"\\nI’m going to just fly over those names. Again, I just need to display data.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Oh, if you are just displaying the data you didn’t need React to begin with. You would had been fine with a templating engine.\"},{\"insert\":\"\\nAre you kidding me? Do you think this is funny? Is that how you treat your loved ones?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-I was just explaining what you could use.\"},{\"insert\":\"\\nStop. Just stop.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-I mean, even if it’s just using templating engine, I would still use a Typescript + SystemJS + Babel combo if I were you.\"},{\"insert\":\"\\n\"},{\"attributes\":{\"background\":\"transparent\"},\"insert\":\"I need to display data on a page, not perform Sub Zero’s original MK fatality.\"},{\"insert\":\"Just tell me what templating engine to use and I’ll take it from there.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-There’s a lot, which one you are familiar with?\"},{\"insert\":\"\\nUgh, can’t remember the name. It was a long time ago.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-jTemplates? jQote? PURE?\"},{\"insert\":\"\\nErr, doesn’t ring a bell. Another one?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Transparency? JSRender? MarkupJS? KnockoutJS? That one had two-way binding.\"},{\"insert\":\"\\nAnother one?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-PlatesJS? jQuery-tmpl? Handlebars? Some people still use it.\"},{\"insert\":\"\\nMaybe. Are there similar to that last one?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Mustache, underscore? I think now even lodash has one to be honest, but those are kind of 2014.\"},{\"insert\":\"\\nErr.. maybe it was newer.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Jade? DustJS?\"},{\"insert\":\"\\nNo.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-DotJS? EJS?\"},{\"insert\":\"\\nNo.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Nunjucks? ECT?\"},{\"insert\":\"\\nNo.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Mah, no one likes Coffeescript syntax anyway. Jade?\"},{\"insert\":\"\\nNo, you already said Jade.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-I meant Pug. I meant Jade. I mean, Jade is now Pug.\"},{\"insert\":\"\\nSigh. No. Can’t remember. Which one would you use?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Probably just ES6 native template strings.\"},{\"insert\":\"\\nLet me guess. And that requires ES6.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Correct.\"},{\"insert\":\"\\nWhich, depending on what browser I’m using needs Babel.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Correct.\"},{\"insert\":\"\\nWhich, if I want to include without adding the entire core library, I need to load it as a module from npm.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Correct.\"},{\"insert\":\"\\nWhich, requires Browserify, or Wepback, or most likely that other thing called SystemJS.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Correct.\"},{\"insert\":\"\\nWhich, unless it’s Webpack, ideally should be managed by a task runner.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Correct.\"},{\"insert\":\"\\nBut, since I should be using functional programming and typed languages I first need to pre-compile Typescript or add this Flow thingy.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Correct.\"},{\"insert\":\"\\nAnd then send that to Babel if I want to use await.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Correct.\"},{\"insert\":\"\\nSo I can then use Fetch, promises, and control flow and all that magic.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Just don’t forget to polyfill Fetch if it’s not supported, Safari still can’t handle it.\"},{\"insert\":\"\\nYou know what. I think we are done here. Actually, I think I’m done. I’m done with the web, I’m done with JavaScript altogether.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-That’s fine, in a few years we all are going to be coding in Elm or WebAssembly.\"},{\"insert\":\"\\nI’m just going to move back to the backend. I just can’t handle these many changes and versions and editions and compilers and transpilers. The JavaScript community is insane if it thinks anyone can keep up with this.\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-I hear you. You should try the Python community then.\"},{\"insert\":\"\\nWhy?\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"-Ever heard of Python 3?\"},{\"insert\":\"\\n\"}]}",
        "topic": "Web Development",
        "dateposted": "July 20, 2018",
        "id": 1
    },
    {
        "title": "JavaScript: What’s new in ECMAScript 2018 (ES2018)?",
        "image": "https://cdn-images-1.medium.com/max/800/1*2USQFRPHkmpnXI8Ty-OloA.png",
        "author": "Eric Dyer",
        "length": "6 mins",
        "previewcontent": "At the latest TC39 meeting the new features that will make it into the “ECMAScript® 2018 Language Specification” (ES2018) have been selected. All proposals that have reached stage-4 since the consolidation of ES2017 got selected. This post gives one a quick look at the features that made it into ES2018.",
        "content": "{\"ops\":[{\"insert\":\"At the latest TC39 meeting the new features that will make it into the \"},{\"attributes\":{\"bold\":true},\"insert\":\"“ECMAScript® 2018 Language Specification”\"},{\"insert\":\" (ES2018) have been selected. All proposals that have reached stage-4 since the consolidation of \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://www.bram.us/2017/07/18/es2017-es8-language-features/\"},\"insert\":\"ES2017\"},{\"insert\":\" got selected. This post gives one a quick look at the features that made it into ES2018.\\n\\n\"},{\"attributes\":{\"italic\":true,\"bold\":true},\"insert\":\"❓ Stage-4 \"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"The TC39 Committee has \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://tc39.github.io/process-document/\"},\"insert\":\"a 5 stage process in place, ranging from stage-0 to stage-4\"},{\"attributes\":{\"italic\":true},\"insert\":\", by which it develops a new language feature. Stage-4 is the “Finished” phase. A list of Stage-4 proposals is \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposals/blob/master/finished-proposals.md\"},\"insert\":\"available on GitHub\"},{\"attributes\":{\"italic\":true},\"insert\":\".\"},{\"insert\":\"\\n\\nObject Rest/Spread Properties\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"insert\":\"When destructuring an object, \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-object-rest-spread\"},\"insert\":\"Object Rest Properties\"},{\"insert\":\" allow you to collect the remaining properties of an object onto a new object. Think of it as a magic magnet attracting all leftovers.\\n\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*B9x6JBbf8RvAbtNDecUhLQ.png\"}},{\"insert\":\"\\n\\n\"},{\"attributes\":{\"color\":\"rgba(0, 0, 0, 0.84)\",\"background\":\"#ffffff\"},\"insert\":\"I use this one myself a lot, especially in a React (Native) context where I pluck certain values from \"},{\"attributes\":{\"color\":\"rgba(0, 0, 0, 0.84)\",\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"this.props\"},{\"attributes\":{\"color\":\"rgba(0, 0, 0, 0.84)\",\"background\":\"#ffffff\"},\"insert\":\" for internal use, and then forward on all other props to the returned child component by spreading them again.\"},{\"insert\":\"\\n\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*sLrYwcDW3G20NBPBiAIZFw.png\"}},{\"insert\":\"\\n\\n\"},{\"attributes\":{\"color\":\"rgba(0, 0, 0, 0.84)\",\"background\":\"#ffffff\"},\"insert\":\"Additionally, if you turn your thinking-logic around a bit, Object Rest Properties provide you with a good way to \"},{\"attributes\":{\"color\":\"inherit\",\"background\":\"#ffffff\",\"link\":\"https://www.bram.us/2018/01/10/javascript-removing-a-property-from-an-object-immutably-by-destructuring-it/\"},\"insert\":\"remove a property from an object in an immutable way\"},{\"attributes\":{\"color\":\"rgba(0, 0, 0, 0.84)\",\"background\":\"#ffffff\"},\"insert\":\".\"},{\"insert\":\"\\n\\nAsynchronous Iteration\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"insert\":\"With \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-async-iteration\"},\"insert\":\"Asynchronous Iteration\"},{\"insert\":\" we get asynchronous iterators and asynchronous iterables. Asynchronous iterators just like regular iterators, except their \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"next()\"},{\"insert\":\"method returns a promise for a \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"{ value, done }\"},{\"insert\":\" pair. To consume asynchronous iterables, we can now use the \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"await\"},{\"insert\":\" keyword with \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"for … of\"},{\"insert\":\"loops.\\n\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*C_7kNH0_rFeicKi9tObdZw.png\"}},{\"insert\":\"\\n\\nPromise.prototype.finally()\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"attributes\":{\"link\":\"https://github.com/tc39/proposal-promise-finally\",\"color\":\"inherit\",\"background\":\"#f0f0f0\",\"code\":true},\"insert\":\"Promise.prototype.finally()\"},{\"insert\":\" finalizes the whole promises implementation, allowing you to register a callback to be invoked when a promise is settled (either fulfilled, or rejected).\\nA typical use case is to hide a spinner after a \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"fetch()\"},{\"insert\":\" request: instead of duplicating the logic inside the last \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\".then()\"},{\"insert\":\" and \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\".catch()\"},{\"insert\":\", one can now place it inside \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\".finally()\"},{\"insert\":\"\\n\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*0zLMfcqCqEc5avr8d84xTQ.png\"}},{\"insert\":\"\\n\\nRegExp related features\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"insert\":\"In total 4 \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"RegExp\"},{\"insert\":\" related proposals made it into ES2018:\\n\"},{\"attributes\":{\"link\":\"https://github.com/tc39/proposal-regexp-dotall-flag\",\"color\":\"inherit\",\"background\":\"#f0f0f0\",\"code\":true},\"insert\":\"s\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-regexp-dotall-flag\"},\"insert\":\" (\"},{\"attributes\":{\"link\":\"https://github.com/tc39/proposal-regexp-dotall-flag\",\"color\":\"inherit\",\"background\":\"#f0f0f0\",\"code\":true},\"insert\":\"dotAll\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-regexp-dotall-flag\"},\"insert\":\") flag for regular expressions\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-regexp-named-groups\"},\"insert\":\"RegExp named capture groups\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-regexp-lookbehind\"},\"insert\":\"RegExp Lookbehind Assertions\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-regexp-unicode-property-escapes\"},\"insert\":\"RegExp Unicode Property Escapes\"},{\"attributes\":{\"list\":\"bullet\"},\"insert\":\"\\n\"},{\"insert\":\"I especially digg the “RegExp named capture groups” feature, as it improves readability:\\n\\n\"},{\"insert\":{\"image\":\"https://cdn-images-1.medium.com/max/800/1*GuYqQQ29T3eULUlUFLOR0g.png\"}},{\"insert\":\"\\n\\nMore info on these features can be found at Mathias Bynens — one of the driving forces behind these proposals — his blog: \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://mathiasbynens.be/notes/es-regexp-proposals\"},\"insert\":\"ECMAScript regular expressions are getting better!\"},{\"insert\":\"\\n\\nOther new Features\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"insert\":\"To top it off \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://github.com/tc39/proposal-template-literal-revision\"},\"insert\":\"a tweak to template literals\"},{\"insert\":\" landed: when using tagged template literals the restriction on escape sequences are removed, thus allowing things like \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"\\\\xerxes\"},{\"insert\":\". Before this tweak an error would be thrown because \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"\\\\x\"},{\"insert\":\" is the start of a hex escape with \"},{\"attributes\":{\"background\":\"rgba(0, 0, 0, 0.05)\",\"code\":true},\"insert\":\"erxes\"},{\"insert\":\" not being a valid hex value.\\n\\n\"},{\"attributes\":{\"italic\":true,\"bold\":true},\"insert\":\"❓ Tagged template literal\"},{\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"As per \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"},\"insert\":\"MDN\"},{\"attributes\":{\"italic\":true},\"insert\":\": If there is an expression preceding the template literal, the template string is called a “tagged template literal”. In that case, the tag expression (usually a function) gets called with the processed template literal, which you can then manipulate before outputting.\"},{\"insert\":\"\\n\\nWhat now?\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"insert\":\"Do note that not all these features are readily available in all browsers. Meaning that they’re Stage-4 means that they are finished, and that browser vendors should implement them \"},{\"attributes\":{\"italic\":true},\"insert\":\"(some already have, others are in the process)\"},{\"insert\":\".\\nAs for the future, I’m already looking forward at what’s next to come for JavaScript. Things like the \"},{\"attributes\":{\"color\":\"inherit\",\"link\":\"https://www.bram.us/2017/01/30/javascript-null-propagation-operator/\"},\"insert\":\"Optional Chaining Operator\"},{\"insert\":\" already get me very excited 😊\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"💻 The examples embedded in this post are part of a talk on ESNext named \"},{\"attributes\":{\"italic\":true,\"bold\":true},\"insert\":\"“What’s next for JavaScript?”\"},{\"attributes\":{\"italic\":true},\"insert\":\", which I recently gave at a \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://fronteers.nl/vereniging/commissies/belgie\"},\"insert\":\"Fronteers België\"},{\"attributes\":{\"italic\":true},\"insert\":\"meetup. I’m currently still in the process of preparing the slides for publication. I’m available for bringing this talk at your meetup/conference.\"},{\"insert\":\"\\n\"},{\"attributes\":{\"italic\":true},\"insert\":\"💡 This post \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://www.bram.us/2018/01/30/whats-new-in-ecmascript2018/\"},\"insert\":\"first appeared on my blog bram.us\"},{\"attributes\":{\"italic\":true},\"insert\":\". You can follow it via \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://www.bram.us/feed/\"},\"insert\":\"RSS\"},{\"attributes\":{\"italic\":true},\"insert\":\", \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://www.twitter.com/bramusblog/\"},\"insert\":\"Twitter\"},{\"attributes\":{\"italic\":true},\"insert\":\", and \"},{\"attributes\":{\"italic\":true,\"color\":\"inherit\",\"link\":\"https://www.facebook.com/bramusblog\"},\"insert\":\"Facebook\"},{\"attributes\":{\"italic\":true},\"insert\":\".\"},{\"insert\":\"\\n\"}]}",
        "topic": "Programming",
        "dateposted": "July 19, 2018",
        "id": 0,
        "comments": [
            {
                "author": "Liam Dyer",
                "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                "date": "July 19, 2018"
            },
            {
                "author": "Liam Dyer",
                "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                "date": "July 19, 2018"
            },
            {
                "author": "Liam Dyer",
                "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                "date": "July 19, 2018"
            }
        ]
    }
]